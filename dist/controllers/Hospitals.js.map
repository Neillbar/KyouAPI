{"version":3,"sources":["../../src/controllers/Hospitals.js"],"names":["req","res","newHosp","newhospSchema","name","body","latitude","longitude","description","findOne","checkHosp","status","send","save","savedHosp","addNewHospital","hospitalID","params","id","_id","findHosp","getOneHospital","find","length","getAllHospitals","mongoose","require","Router","module","exports","config","db","api","post","get"],"mappings":"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","file":"Hospitals.js","sourcesContent":["var mongoose = require('mongoose');\nvar {Router} = require('express');\nnewhospSchema = require('../Schemas/hospitalSchema');\n\n\n\nasync function addNewHospital(req,res){\n\n//add new hospital \n\nnewHosp = new newhospSchema();\nnewHosp.name = req.body.name;\nnewHosp.latitude = req.body.latitude;\nnewHosp.longitude = req.body.longitude;\nnewHosp.description = req.body.description;\n\n\nlet checkHosp = await newhospSchema.findOne({name:req.body.name});\n\nif(checkHosp){\nreturn res.status(400).send(\"Hospital is already on the list\");\n    \n}\n\nlet savedHosp = await newHosp.save();\n\nres.status(200).send(savedHosp);\n\n} //addNewHospital\n\nasync function getOneHospital(req,res){\n\nlet hospitalID = req.params.id;\n\nlet findHosp = await newhospSchema.findOne({_id:hospitalID});\n\nif(!findHosp){\n    return res.status(400).send(\"No hospital Found\");\n}\n\nres.status(200).send(findHosp);\n\n\n}//getOneHospital\n\n\n\n\nasync function getAllHospitals(req,res){\n\n    let findHosp = await newhospSchema.find({});\n\n    if(findHosp.length < 1){\n        return res.status(400).send(\"No hospital Found\");\n    }\n    \n    res.status(200).send(findHosp);\n\n}\n\n\nmodule.exports = ({config,db}) => {\n\n    let api = Router();\n    \n  api.post('/new',async(req,res) => {\n\n    addNewHospital(req,res);\n\n\n  })\n\n  api.get('/getone/:id',async (req,res)=> {\n\n    getOneHospital(req,res);\n\n  })\n\n  api.get('/getall',async (req,res) => {\n\n    getAllHospitals(req,res);\n\n  })\n    \n    \n    return api;\n    \n    }//exporting"]}