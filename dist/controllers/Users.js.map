{"version":3,"sources":["../../src/controllers/Users.js"],"names":["req","res","password","md5","body","newuser","newUser","name","phoneNumber","language","idNumber","email","find","findUser","console","log","length","status","send","save","savedUser","registerUserFunction","findOne","User","LoginUser","mongoose","require","Router","module","exports","config","db","api","post"],"mappings":";;;uEAOA,iBAAqCA,GAArC,EAAyCC,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,gCAFR,GAEmBC,IAAIH,IAAII,IAAJ,CAASF,QAAb,CAFnB;AAIQG,+BAJR,GAIkB,IAAIC,OAAJ,EAJlB;;AAKID,gCAAQE,IAAR,GAAeP,IAAII,IAAJ,CAASG,IAAxB;AACAF,gCAAQG,WAAR,GAAsBR,IAAII,IAAJ,CAASI,WAA/B;AACAH,gCAAQI,QAAR,GAAmBT,IAAII,IAAJ,CAASK,QAA5B;AACAJ,gCAAQK,QAAR,GAAmBV,IAAII,IAAJ,CAASM,QAA5B;AACAL,gCAAQM,KAAR,GAAgBX,IAAII,IAAJ,CAASO,KAAzB;AACAN,gCAAQH,QAAR,GAAmBA,QAAnB;;AAVJ;AAAA,+BAcyBI,QAAQM,IAAR,CAAa,EAACF,UAASV,IAAII,IAAJ,CAASM,QAAnB,EAAb,CAdzB;;AAAA;AAcQG,gCAdR;;AAeIC,gCAAQC,GAAR,CAAYF,QAAZ;;AAfJ,8BAgBOA,SAASG,MAAT,GAAkB,CAhBzB;AAAA;AAAA;AAAA;;AAAA,yDAiBWf,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAjBX;;AAAA;AAAA;AAAA,+BAuB0Bb,QAAQc,IAAR,EAvB1B;;AAAA;AAuBQC,iCAvBR;;;AAyBInB,4BAAIiB,IAAJ,CAASE,SAAT;;AAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAgBC,oB;;;KA+Bf;;;wEAED,kBAAyBrB,GAAzB,EAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEkBK,QAAQgB,OAAR,CAAgB,EAACX,OAAOX,IAAII,IAAJ,CAASO,KAAjB,EAAhB,CAFlB;;AAAA;AAEIY,4BAFJ;;AAAA,4BAIIA,IAJJ;AAAA;AAAA;AAAA;;AAAA,0DAKWtB,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CALX;;AAAA;AAAA,8BAaGK,KAAKrB,QAAL,KAAkBC,IAAIH,IAAII,IAAJ,CAASF,QAAb,CAbrB;AAAA;AAAA;AAAA;;AAAA,0DAeWD,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB,CAfX;;AAAA;;AAmBAjB,4BAAIiB,IAAJ,CAASK,IAAT;;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,S;;;KAuBd;;;;AA/DD,IAAIC,WAAWC,QAAQ,UAAR,CAAf;;eACeA,QAAQ,SAAR,C;IAAVC,M,YAAAA,M;;AACL,IAAIrB,UAAUoB,QAAQ,wBAAR,CAAd;AACA,IAAIvB,MAAMuB,QAAQ,KAAR,CAAV;;AA8DAE,OAAOC,OAAP,GAAiB,iBAAiB;AAAA,QAAfC,MAAe,SAAfA,MAAe;AAAA,QAARC,EAAQ,SAARA,EAAQ;;;AAElC,QAAIC,MAAML,QAAV;;AAEAK,QAAIC,IAAJ,CAAS,WAAT;AAAA,4EAAqB,kBAAOjC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AACjBoB,iDAAqBrB,GAArB,EAAyBC,GAAzB;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArB;;AAAA;AAAA;AAAA;AAAA;;AAKA+B,QAAIC,IAAJ,CAAS,QAAT;AAAA,4EAAkB,kBAAOjC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;;AAEduB,sCAAUxB,GAAV,EAAcC,GAAd;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAlB;;AAAA;AAAA;AAAA;AAAA;;AAUA,WAAO+B,GAAP;AAUC,CA7BD,C,CA6BC","file":"Users.js","sourcesContent":["var mongoose = require('mongoose');\nvar {Router} = require('express');\nvar newUser = require('../Schemas/UsersSchema');\nvar md5 = require('md5');\n\n\n\nasync function  registerUserFunction(req,res){\n\n    let password = md5(req.body.password);\n\n    let newuser = new newUser();\n    newuser.name = req.body.name;\n    newuser.phoneNumber = req.body.phoneNumber;\n    newuser.language = req.body.language;\n    newuser.idNumber = req.body.idNumber;\n    newuser.email = req.body.email;\n    newuser.password = password;\n    \n    \n    \n    let findUser = await newUser.find({idNumber:req.body.idNumber});\n    console.log(findUser);\n    if(findUser.length > 0){\n    return res.status(400).send(\"user already exists\");\n    \n    }\n    \n    \n    \n    let savedUser = await newuser.save();\n    \n    res.send(savedUser);\n    \n    \n    \n\n\n}//registerUserFunction\n\nasync function LoginUser(req,res){\n\nlet User = await  newUser.findOne({email: req.body.email});\n\nif(!User){\n    return res.status(400).send(\"user does not exist\");\n}\n\n// if(User.email !== req.body.email){\n// return res.status(400).send(\"Email does not exists in the database\");\n\n// }\n\nif(User.password !== md5(req.body.password)){\n\n    return res.status(400).send(\"Password is incorrect\");\n\n}\n\nres.send(User);\n\n\n\n}//LoginUser\n\nmodule.exports = ({config,db}) => {\n\nlet api = Router();\n\napi.post('/register',async (req,res) => {\n    registerUserFunction(req,res);\n\n})\n\napi.post('/login',async (req,res) => {\n\n    LoginUser(req,res);\n});\n\n\n\n\n\n\nreturn api;\n\n\n\n\n\n\n\n\n\n}//exporting"]}