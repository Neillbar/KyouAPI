{"version":3,"sources":["../../src/controllers/complaints.js"],"names":["req","res","users","findOne","idNumber","body","loggedBy","findUser","randomID","uniqid","time","newComplaint","complaintScheme","complaintID","hospID","hospName","type","complaintText","progress","complaints","push","attachments","save","savedComplaint","SaveComplaintToUser","status","json","message","ComplaintID","send","addComplaint","params","compid","findSpeseficComplaint","getComplaintByID","userID","find","sort","date","findComplaints","length","getallComplaintsForUser","mongoose","require","Router","module","exports","config","db","api","post","get"],"mappings":"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","file":"complaints.js","sourcesContent":["var mongoose = require('mongoose');\nvar { Router } = require('express');\nvar complaintScheme = require('../Schemas/complaintsSchema');\nvar users = require('../Schemas/UsersSchema');\nvar uniqid = require('uniqid');\n//var attachments = require('../Schemas/attachmentsSchema');\n\n\nasync function addComplaint(req,res){\n\nlet findUser = await users.findOne({idNumber: req.body.loggedBy});\n    let randomID = uniqid.time();\n    var newComplaint = new complaintScheme();\n    newComplaint.complaintID = randomID;\n    newComplaint.loggedBy = req.body.loggedBy;\n    newComplaint.hospID = req.body.hospID;\n    newComplaint.hospName = req.body.hospName;\n    newComplaint.type = req.body.type;\n    newComplaint.complaintText = req.body.complaintText;\n    newComplaint.progress = req.body.progress;\n    findUser.complaints.push(randomID);\n    newComplaint.attachments = req.body.attachments;\n    let savedComplaint = await newComplaint.save();  \n    let SaveComplaintToUser = await findUser.save();\n\n    if(savedComplaint && SaveComplaintToUser ){\n        return res.status(200).json({message:\"Success\",ComplaintID: randomID});\n\n    }else{\n        return res.status(400).send({message:\"Failure Saving Data\"});\n\n    }\n\n\n}\n\nasync function getComplaintByID(req,res){\n\nlet findSpeseficComplaint = await complaintScheme.findOne({complaintID:req.params.compid});\n\nif(!findSpeseficComplaint){\n    return res.status(400).send(\"No Complaint found\");\n}\n\nres.status(200).json(findSpeseficComplaint);\n\n}\n\nasync function getallComplaintsForUser(req,res){\nuserID = req.params.userID;\n\nlet findComplaints = await complaintScheme.find({loggedBy: userID}).sort({date: -1});\n\nif(findComplaints.length < 1){\n    return res.status(400).send(\"No complaints found for this user\");\n}\n\nres.status(200).json(findComplaints);\n\n\n}\n\n\n\n\nmodule.exports = ({ config, db }) => {\n\n    let api = Router();\n\n    api.post('/add',(req,res) => {\n        addComplaint(req,res);\n    })\n\napi.get('/getOneByID/:compid',(req,res) => {\n    getComplaintByID(req,res)\n})\n\napi.get('/getAllComplaintsPerUser/:userID',(req,res) => {\n\n    getallComplaintsForUser(req,res);\n\n\n})\n\n    return api;\n\n}"]}