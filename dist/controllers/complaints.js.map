{"version":3,"sources":["../../src/controllers/complaints.js"],"names":["req","res","users","findOne","idNumber","body","loggedBy","findUser","randomID","uniqid","time","newComplaint","complaintScheme","complaintID","hospID","type","complaintText","progress","complaints","push","attachments","save","savedComplaint","SaveComplaintToUser","status","json","message","ComplaintID","send","addComplaint","params","compid","findSpeseficComplaint","getComplaintByID","userID","find","findComplaints","length","getallComplaintsForUser","mongoose","require","Router","module","exports","config","db","api","post","get"],"mappings":"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","file":"complaints.js","sourcesContent":["var mongoose = require('mongoose');\nvar { Router } = require('express');\nvar complaintScheme = require('../Schemas/complaintsSchema');\nvar users = require('../Schemas/UsersSchema');\nvar uniqid = require('uniqid');\n//var attachments = require('../Schemas/attachmentsSchema');\n\n\nasync function addComplaint(req,res){\n\nlet findUser = await users.findOne({idNumber: req.body.loggedBy});\n    let randomID = uniqid.time();\n    var newComplaint = new complaintScheme();\n    newComplaint.complaintID = randomID;\n    newComplaint.loggedBy = req.body.loggedBy;\n    newComplaint.hospID = req.body.hospID;\n    newComplaint.type = req.body.type;\n    newComplaint.complaintText = req.body.complaintText;\n    newComplaint.progress = req.body.progress;\n    findUser.complaints.push(randomID);\n    newComplaint.attachments = req.body.attachments;\n    let savedComplaint = await newComplaint.save();  \n    let SaveComplaintToUser = await findUser.save();\n\n    if(savedComplaint && SaveComplaintToUser ){\n        return res.status(200).json({message:\"Success\",ComplaintID: randomID});\n\n    }else{\n        return res.status(400).send({message:\"Failure Saving Data\"});\n\n    }\n\n\n}\n\nasync function getComplaintByID(req,res){\n\nlet findSpeseficComplaint = await complaintScheme.findOne({complaintID:req.params.compid});\n\nif(!findSpeseficComplaint){\n    return res.status(400).send(\"No Complaint found\");\n}\n\nres.status(200).json(findSpeseficComplaint);\n\n}\n\nasync function getallComplaintsForUser(req,res){\nuserID = req.params.userID;\n\nlet findComplaints = await complaintScheme.find({loggedBy: userID});\n\nif(findComplaints.length < 1){\n    return res.status(400).send(\"No complaints found for this user\");\n}\n\nres.status(200).json(findComplaints);\n\n\n}\n\n\n\n\nmodule.exports = ({ config, db }) => {\n\n    let api = Router();\n\n    api.post('/add',(req,res) => {\n        addComplaint(req,res);\n    })\n\napi.get('/getOneByID/:compid',(req,res) => {\n    getComplaintByID(req,res)\n})\n\napi.get('/getAllComplaintsPerUser/:userID',(req,res) => {\n\n    getallComplaintsForUser(req,res);\n\n\n})\n\n    return api;\n\n}"]}