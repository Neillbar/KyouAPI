{"version":3,"sources":["../../src/controllers/data.js"],"names":["mongoose","require","Router","image2base64","attachmentSchema","fs","module","exports","config","db","api","post","req","res","decodedFile","Buffer","from","body","image","indexOf","split","name","writeFile","err","written","console","log","findOne","checker","newAtt","push","save","newentry","send","updated","get","find","params","findAttachment","length","status","allData","i","items","toString","convertBase64ToString","object"],"mappings":";;;;AAAA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;;eACeA,QAAQ,SAAR,C;IAAVC,M,YAAAA,M;;AACL,IAAMC,eAAeF,QAAQ,iBAAR,CAArB;AACA,IAAIG,mBAAmBH,QAAQ,8BAAR,CAAvB;AACA,IAAMI,KAAKJ,QAAQ,IAAR,CAAX;;AAEAK,OAAOC,OAAP,GAAiB,gBAAiB;AAAA,QAAfC,MAAe,QAAfA,MAAe;AAAA,QAARC,EAAQ,QAARA,EAAQ;;;AAE9B,QAAIC,MAAMR,QAAV;;AAGAQ,QAAIC,IAAJ,CAAS,gBAAT;AAAA,4EAA0B,iBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,uCADkB,GACJC,OAAOC,IAAP,CAAYJ,IAAIK,IAAJ,CAASC,KAAT,CAAeC,OAAf,CAAuB,QAAvB,MAAqC,CAAC,CAAtC,GAA0CP,IAAIK,IAAJ,CAASC,KAAT,CAAeE,KAAf,CAAqB,SAArB,EAAgC,CAAhC,CAA1C,GAA+ER,IAAIK,IAAJ,CAASC,KAApG,EAA2G,QAA3G,CADI;;AAEtBG,mCAAOT,IAAIK,IAAJ,CAASI,IAAhB;AACAhB,+BAAGiB,SAAH,eAAyBD,IAAzB,EAAiCP,WAAjC,EAA8C,UAASS,GAAT,EAAaC,OAAb,EAAqB;AACnE,oCAAGD,GAAH,EAAQE,QAAQC,GAAR,CAAYH,GAAZ,EAAR,KACM;AACJE,4CAAQC,GAAR,CAAY,sBAAZ;AACA;AACJ,6BALE;;AAHsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA1B;;AAAA;AAAA;AAAA;AAAA;;AAeJhB,QAAIC,IAAJ,CAAS,aAAT;AAAA,4EAAuB,kBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACvB;AACIC,uCAFmB,GAELC,OAAOC,IAAP,CAAYJ,IAAIK,IAAJ,CAASC,KAAT,CAAeC,OAAf,CAAuB,QAAvB,MAAqC,CAAC,CAAtC,GAA0CP,IAAIK,IAAJ,CAASC,KAAT,CAAeE,KAAf,CAAqB,SAArB,EAAgC,CAAhC,CAA1C,GAA+ER,IAAIK,IAAJ,CAASC,KAApG,EAA2G,QAA3G,CAFK;AAAA;AAAA,mCAKHd,iBAAiBuB,OAAjB,CAAyB,EAACN,MAAMT,IAAIK,IAAJ,CAASI,IAAhB,EAAzB,CALG;;AAAA;AAKnBO,mCALmB;;AAAA,gCAOnBA,OAPmB;AAAA;AAAA;AAAA;;AAQfC,kCARe,GAQN,IAAIzB,gBAAJ,EARM;;AASnByB,mCAAOR,IAAP,GAAcT,IAAIK,IAAJ,CAASI,IAAvB;AACAQ,mCAAOX,KAAP,CAAaY,IAAb,CAAkBhB,WAAlB;AAVmB;AAAA,mCAWEe,OAAOE,IAAP,EAXF;;AAAA;AAWfC,oCAXe;;AAYnB,gCAAGA,QAAH,EAAY;AACRnB,oCAAIoB,IAAJ,CAASD,QAAT;AACH;;AAdkB;AAAA;;AAAA;;AAkBvBJ,oCAAQV,KAAR,CAAcY,IAAd,CAAmBhB,WAAnB;;AAlBuB;AAAA,mCAoBHc,QAAQG,IAAR,EApBG;;AAAA;AAoBnBG,mCApBmB;;AAqBvB,gCAAGA,OAAH,EAAW;AACPrB,oCAAIoB,IAAJ,CAASC,OAAT;AACH;;AAvBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvB;;AAAA;AAAA;AAAA;AAAA;;AA8BA;;AAEA;;AAEK;AACD;AACA;AACA;;AAED;AACC;AACA;AACA;;;AAGJ;AACI;AACA;AACA;AACA;AACA;AACA;;AAEA;AACJ;;AAEA;;AAxDA;;AA4DAxB,QAAIyB,GAAJ,CAAQ,kBAAR;AAAA,4EAA4B,kBAAOvB,GAAP,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEGT,iBAAiBgC,IAAjB,CAAsB,EAACf,MAAKT,IAAIyB,MAAJ,CAAWhB,IAAjB,EAAtB,CAFH;;AAAA;AAEpBiB,0CAFoB;;AAAA,kCAIrBA,eAAeC,MAAf,GAAwB,CAJH;AAAA;AAAA;AAAA;;AAAA,8DAMb1B,IAAI2B,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,4BAArB,CANa;;AAAA;AAWxBQ,mCAXwB,GAWd,EAXc;AAYxBC,6BAZwB,GAYpB,CAZoB;AAa5B;;AAb4B,mEAcVJ,eAAe,CAAf,EAAkBpB,KAdR;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcpByB,iCAdoB;AAgBpBtB,iCAhBoB,GAgBbiB,eAAe,CAAf,EAAkBjB,IAhBL;AAAA;AAAA,mCAkBSiB,eAAe,CAAf,EAAkBpB,KAAlB,CAAwByB,KAAxB,EAA+BC,QAA/B,CAAwC,QAAxC,CAlBT;;AAAA;AAkBrBC,iDAlBqB;AAoBxBC,kCApBwB,GAoBf,EAACzB,MAAKA,KAAN,EAAWH,OAAM2B,qBAAjB,EApBe;;AAqB5BJ,oCAAQX,IAAR,CAAagB,MAAb;AArB4B;AAAA;;AAAA;AAAA,8DA2BrBjC,IAAIoB,IAAJ,CAASQ,OAAT,CA3BqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA5B;;AAAA;AAAA;AAAA;AAAA;;AAiCI,WAAO/B,GAAP;AAEH,CAnHD","file":"data.js","sourcesContent":["var mongoose = require('mongoose');\nvar {Router} = require('express');\nconst image2base64 = require('image-to-base64');\nvar attachmentSchema = require('../Schemas/attachmentsSchema');\nconst fs = require('fs');\n\nmodule.exports = ({config,db}) => {\n\n    let api = Router();\n\n\n    api.post('/viaFilesystem',async (req,res) => {\n        let decodedFile = Buffer.from(req.body.image.indexOf('base64') !== -1 ? req.body.image.split('base64,')[1] : req.body.image, 'base64');\n        name = req.body.name;\n        fs.writeFile(`./images/${name}`, decodedFile, function(err,written){\n        if(err) console.log(err);\n         else {\n          console.log(\"Successfully written\");\n         }\n     });\n\n    })\n\n\n\n\napi.post('/attachment',async (req,res) => {\n//take base64 to Buffer\nlet decodedFile = Buffer.from(req.body.image.indexOf('base64') !== -1 ? req.body.image.split('base64,')[1] : req.body.image, 'base64');\n    \n\nlet checker = await attachmentSchema.findOne({name: req.body.name});\n\nif(!checker){\n    var newAtt = new attachmentSchema();\n    newAtt.name = req.body.name;\n    newAtt.image.push(decodedFile);\n    let newentry = await newAtt.save();\n    if(newentry){\n        res.send(newentry);\n    }\n    \n}else{\n\nchecker.image.push(decodedFile);\n\nlet updated = await checker.save();\nif(updated){\n    res.send(updated);\n}\n\n\n}\n\n\n\n//take Buffer back to base64\n\n//let text = decodedFile.toString('base64')\n\n     //let subStr = req.body.image.indexOf('data/')\n    // let newSubstr = req.body.image.indexOf('base64')\n    // let tell = req.body.image;\n    // let imageType = tell.substring(subStr+6, newSubstr)\n\n   // console.log(subStr);\n    // console.log(tell);\n    // console.log(tell);\n    // console.log(imageType);\n\n\n//take base64 to a file! \n    // fs.writeFile('test.png', decodedFile, function(err,written){\n    //     if(err) console.log(err);\n    //      else {\n    //       console.log(\"Successfully written\");\n    //      }\n    //  });\n\n    // take file back to base64\n//let file = image2base64('./test.png');\n\n//console.log(await file);\n\n})\n\napi.get('/getByName/:name', async (req,res) => {\n\n    let findAttachment = await attachmentSchema.find({name:req.params.name});\n\n    if(findAttachment.length < 1){\n\n        return res.status(400).send(\"Could not find attachments\");\n    }\n\n\n\nlet allData = [];\nvar i = 0;\n//console.log(findAttachment[0].image.length);\nfor(var items in  findAttachment[0].image){\n    \n    let name = findAttachment[0].name;\n   \n   let convertBase64ToString = await findAttachment[0].image[items].toString('base64');\n\nlet object = {name:name,image:convertBase64ToString };\nallData.push(object);\n}\n//console.log(allData[0]);\n\n//console.log(findAttachment[0].image[1].toString('base64'));\n\nreturn res.send(allData);\n\n\n\n})\n\n    return api;\n\n}"]}