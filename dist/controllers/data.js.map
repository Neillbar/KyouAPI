{"version":3,"sources":["../../src/controllers/data.js"],"names":["mongoose","require","Router","image2base64","attachmentSchema","complaintSchema","fs","module","exports","config","db","api","post","req","res","decodedFile","Buffer","from","body","image","indexOf","split","name","writeFile","err","written","console","log","findOne","complaintID","FindComplaint","status","send","complaintsID","checker","newAtt","type","decodedImage","push","decodedRecording","recording","save","newentry","updated","get","find","params","findAttachment","length","allData","i","items","toString","convertBase64ToString","object"],"mappings":"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","file":"data.js","sourcesContent":["var mongoose = require('mongoose');\nvar {Router} = require('express');\nconst image2base64 = require('image-to-base64');\nvar attachmentSchema = require('../Schemas/attachmentsSchema');\nvar complaintSchema = require('../Schemas/complaintsSchema');\nconst fs = require('fs');\n\nmodule.exports = ({config,db}) => {\n\n    let api = Router();\n\n\n    api.post('/viaFilesystem',async (req,res) => {\n        let decodedFile = Buffer.from(req.body.image.indexOf('base64') !== -1 ? req.body.image.split('base64,')[1] : req.body.image, 'base64');\n        name = req.body.name;\n        fs.writeFile(`./images/${name}`, decodedFile, function(err,written){\n        if(err) console.log(err);\n         else {\n          console.log(\"Successfully written\");\n         }\n     });\n\n    })\n\n\n\n\napi.post('/attachment',async (req,res) => {\n\nlet FindComplaint = await complaintSchema.findOne({complaintID: req.body.complaintID});\n\nif(!FindComplaint){\n    return res.status(400).send(\"No complaints found can't add attachments\");\n}\n\n\n\n// //take base64 to Buffer\n\n\n\n    \n\nlet checker = await attachmentSchema.findOne({complaintsID: req.body.complaintID});\n\nif(!checker){\n    var newAtt = new attachmentSchema();\n    newAtt.complaintsID = req.body.complaintID;\n    \n    if (req.body.type == \"image\"){\n        let decodedImage = Buffer.from(req.body.image.indexOf('base64') !== -1 ? req.body.image.split('base64,')[1] : req.body.image, 'base64');\n        newAtt.image.push(decodedImage);\n    }\n    \n    if(req.body.type == \"recording\"){\n    \n        let decodedRecording = Buffer.from(req.body.recording.indexOf('base64') !== -1 ? req.body.recording.split('base64,')[1] : req.body.recording, 'base64');\n        newAtt.recording = decodedRecording;\n    }\n    \n    \n    let newentry = await newAtt.save();\n    if(newentry){\n        res.send(newentry);\n    }\n    \n}else{\n\n    if (req.body.type == \"image\"){\n        let decodedImage = Buffer.from(req.body.image.indexOf('base64') !== -1 ? req.body.image.split('base64,')[1] : req.body.image, 'base64');\n        checker.image.push(decodedImage);\n    }\n    \n    if(req.body.type == \"recording\"){\n    \n        let decodedRecording = Buffer.from(req.body.recording.indexOf('base64') !== -1 ? req.body.recording.split('base64,')[1] : req.body.recording, 'base64');\n        checker.recording = decodedRecording;\n    }\n\nlet updated = await checker.save();\nif(updated){\n    res.send(updated);\n}\n\n\n}\n\n\n\n//take Buffer back to base64\n\n//let text = decodedFile.toString('base64')\n\n     //let subStr = req.body.image.indexOf('data/')\n    // let newSubstr = req.body.image.indexOf('base64')\n    // let tell = req.body.image;\n    // let imageType = tell.substring(subStr+6, newSubstr)\n\n   // console.log(subStr);\n    // console.log(tell);\n    // console.log(tell);\n    // console.log(imageType);\n\n\n//take base64 to a file! \n    // fs.writeFile('test.png', decodedFile, function(err,written){\n    //     if(err) console.log(err);\n    //      else {\n    //       console.log(\"Successfully written\");\n    //      }\n    //  });\n\n    // take file back to base64\n//let file = image2base64('./test.png');\n\n//console.log(await file);\n\n})\n\napi.get('/getByName/:name', async (req,res) => {\n\n    let findAttachment = await attachmentSchema.find({name:req.params.name});\n\n    if(findAttachment.length < 1){\n\n        return res.status(400).send(\"Could not find attachments\");\n    }\n\n\n\nlet allData = [];\nvar i = 0;\n//console.log(findAttachment[0].image.length);\nfor(var items in  findAttachment[0].image){\n    \n    let name = findAttachment[0].name;\n   \n   let convertBase64ToString = await findAttachment[0].image[items].toString('base64');\n\nlet object = {name:name,image:convertBase64ToString };\nallData.push(object);\n}\n//console.log(allData[0]);\n\n//console.log(findAttachment[0].image[1].toString('base64'));\n\nreturn res.send(allData);\n\n\n\n})\n\n    return api;\n\n}"]}