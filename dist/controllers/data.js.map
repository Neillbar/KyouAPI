{"version":3,"sources":["../../src/controllers/data.js"],"names":["mongoose","require","Router","image2base64","attachmentSchema","complaintSchema","fs","module","exports","config","db","api","post","req","res","decodedFile","Buffer","from","body","image","indexOf","split","name","writeFile","err","written","console","log","findOne","complaintID","FindComplaint","status","send","complaintsID","checker","newAtt","type","path","push","imageID","recording","recordingID","video","videoID","save","newentry","updated","get","find","params","findAttachment","length","mediaObject","String","imagePath","Number","videoPath","recordingPath","items"],"mappings":"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","file":"data.js","sourcesContent":["var mongoose = require('mongoose');\nvar {Router} = require('express');\nconst image2base64 = require('image-to-base64');\nvar attachmentSchema = require('../Schemas/attachmentsSchema');\nvar complaintSchema = require('../Schemas/complaintsSchema');\nconst fs = require('fs');\n\nmodule.exports = ({config,db}) => {\n\n    let api = Router();\n\n\n    api.post('/viaFilesystem',async (req,res) => {\n        let decodedFile = Buffer.from(req.body.image.indexOf('base64') !== -1 ? req.body.image.split('base64,')[1] : req.body.image, 'base64');\n        name = req.body.name;\n        fs.writeFile(`./images/${name}`, decodedFile, function(err,written){\n        if(err) console.log(err);\n         else {\n          console.log(\"Successfully written\");\n         }\n     });\n\n    })\n\n\n\n\napi.post('/attachment',async (req,res) => {\n\nlet FindComplaint = await complaintSchema.findOne({complaintID: req.body.complaintID});\n\nif(!FindComplaint){\n    return res.status(400).send(\"No complaints found can't add attachments\");\n}\n\n\n\n// //take base64 to Buffer\n\nlet checker = await attachmentSchema.findOne({complaintsID: req.body.complaintID});\n\nif(!checker){\n    var newAtt = new attachmentSchema();\n    newAtt.complaintsID = req.body.complaintID;\n    \n    if (req.body.type == \"image\"){\n        //let decodedImage = Buffer.from(req.body.image.indexOf('base64') !== -1 ? req.body.image.split('base64,')[1] : req.body.image, 'base64');\n        // newAtt.image.push.path(req.body.image);\n        // newAtt.image.push.imageID(req.body.imageID);\n\n        newAtt.image.path.push(req.body.image);\n        newAtt.image.imageID.push(req.body.imageID);\n    }\n    \n    if(req.body.type == \"recording\"){\n    \n       // let decodedRecording = Buffer.from(req.body.recording.indexOf('base64') !== -1 ? req.body.recording.split('base64,')[1] : req.body.recording, 'base64');\n        newAtt.recording = req.body.recording;\n        newAtt.recordingID = req.body.recordingID;\n    }\n    if(req.body.type == \"video\"){\n    \n        //let decodedVideo = Buffer.from(req.body.video.indexOf('base64') !== -1 ? req.body.video.split('base64,')[1] : req.body.video, 'base64');\n        newAtt.video = req.body.video;\n        newAtt.videoID = req.body.videoID;\n    }\n    \n    \n    let newentry = await newAtt.save();\n    if(newentry){\n        res.send(newentry);\n    }\n    \n}else{\n\n    if (req.body.type == \"image\"){\n       // let decodedImage = Buffer.from(req.body.image.indexOf('base64') !== -1 ? req.body.image.split('base64,')[1] : req.body.image, 'base64');\n        checker.image.path.push(req.body.image);\n        checker.image.imageID.push(req.body.imageID);\n\n       \n    }\n    \n    if(req.body.type == \"recording\"){\n    \n        //let decodedRecording = Buffer.from(req.body.recording.indexOf('base64') !== -1 ? req.body.recording.split('base64,')[1] : req.body.recording, 'base64');\n        checker.recording = req.body.recording;\n        checker.recordingID = req.body.recordingID;\n    }\n    if(req.body.type == \"video\"){\n    \n       // let decodedVideo = Buffer.from(req.body.video.indexOf('base64') !== -1 ? req.body.video.split('base64,')[1] : req.body.video, 'base64');\n        checker.video = req.body.video;\n        checker.videoID = req.body.videoID;\n    }\n\nlet updated = await checker.save();\nif(updated){\n    res.send(updated);\n}\n\n\n}\n\n\n})\n\napi.get('/getByName/:complaintID', async (req,res) => {\n\n    let findAttachment = await attachmentSchema.find({complaintsID:req.params.complaintID});\n\n    if(findAttachment.length < 1){\n\n        return res.status(400).send(\"Could not find attachments\");\n    }\n\n\n\n\nlet mediaObject = {name:String,imagePath: [String], imageID: [Number],videoPath:String,videoID:Number,recordingPath:String,recordingID:String};\n//console.log(findAttachment[0].image.length);\nif(findAttachment[0].image){\n\nfor(var items in  findAttachment[0].image.path){\n   if(findAttachment[0].image.path[items] !== null){\n   let name = findAttachment[0].complaintsID;\n   mediaObject.name = name;\n   mediaObject.imagePath.push(findAttachment[0].image.path[items]);\n   mediaObject.imageID.push(findAttachment[0].image.imageID[items]);\n   }\n}\n}\n\nif(findAttachment[0].video){\n    mediaObject.videoPath = findAttachment[0].video;\n    mediaObject.videoID = findAttachment[0].videoID;\n    \n    // let name = findAttachment[0].complaintsID;\n\n    // let VideoconvertBase64ToString = await findAttachment[0].video.toString('base64');\n    // let object = {complaintsID:name,video:VideoconvertBase64ToString};\n    // allData.push(object);\n}\n\nif(findAttachment[0].recording){\nmediaObject.recordingPath = findAttachment[0].recording;\nmediaObject.recordingID = findAttachment[0].recordingID;\n\n    // let name = findAttachment[0].complaintsID;\n    // let RecordingconvertBase64ToString = await findAttachment[0].video.toString('base64');\n    // let object = {complaintsID:name,recording:RecordingconvertBase64ToString};\n    // allData.push(object);\n\n}\n\n\n//console.log(allData[0]);\n\n//console.log(findAttachment[0].image[1].toString('base64'));\n\nreturn res.send(mediaObject);\n\n\n\n})\n\n    return api;\n\n}"]}